#!/usr/bin/env groovy

def random_string_generator() {
    StringBuilder sb = new StringBuilder("xyz");
    def random = new Random();
	for(int i=0;i<6;i++) {
	    sb.append(random.nextInt(10));
	}
    return sb.toString();
}

def generateDotenvForDocker(String branch) {
    String env_vars = (
            "MYSQL_DATABASE=" + random_string_generator() + "\n" +
            "MYSQL_USER=" + random_string_generator() + "\n" +
            "MYSQL_PASSWORD=" + random_string_generator() + "\n" +
            "MYSQL_ROOT_PASSWORD=" + random_string_generator() + "\n" +
            "MYSQL_RANDOM_ROOT_PASSWORD=" + random_string_generator() + "\n" +
            "WORDPRESS_DB_USER=" + random_string_generator() + "\n" +
            "WORDPRESS_DB_PASSWORD=" + random_string_generator() + "\n" +
            "WORDPRESS_ADMIN_USER=" + random_string_generator() + "\n" +
            "WORDPRESS_ADMIN_PASS=" + random_string_generator() + "\n" +
            "WORDPRESS_ADMIN_SITE_TITLE=" + random_string_generator() + "\n" +
            "BRANCH=" + branch + "\n"
        );
    withCredentials([
        usernamePassword(
            credentialsId: 'cognam-blended-dev-github',
            usernameVariable: 'BLENDED_GITHUB_USER',
            passwordVariable: 'BLENDED_GITHUB_PASS'
        ),
        string(
            credentialsId: 'wordpress-admin-email',
            variable: 'WORDPRESS_ADMIN_EMAIL'
        )
    ]) {
        env_vars = env_vars.concat(
            "GITHUB_USER=" + BLENDED_GITHUB_USER + "\n" +
            "GITHUB_PASS=" + BLENDED_GITHUB_PASS + "\n" +
            "WORDPRESS_ADMIN_EMAIL=" + WORDPRESS_ADMIN_EMAIL
        )
    }
    writeFile(file: '.env', text: env_vars);
}

pipeline {
   agent any
   stages {
       stage("Init") {
           steps {
               echo "Running init stage inside project1."
               generateDotenvForDocker("master")
               sh "cat .env"
           }
       }
       stage("build") {
           steps {
               echo "Running build stage inside project1."
               sh "git clone repo"
               sh "cd ..."
               sh "./rebuild"
           }
       }
       stage("test") {
           steps {
               echo "Running test stage inside project1."
           }
       }
       stage("deploy") {
           steps {
               echo "Running deploy stage inside project1."
           }
       }
   }
   // post {
       // always {
       //     mail to: 'jkumar@cognam.com',
       //    subject: "Result Pipeline: ${currentBuild.fullDisplayName}",
       //    body: "Please check here: ${env.BUILD_URL}"
       // }
   // }
}
